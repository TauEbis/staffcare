require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe GradesController, :type => :controller do

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GradesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:location_plan) { create(:location_plan) }

  before do
    sign_in create(:admin_user)
  end

  #describe "GET index" do
  #  it "assigns all grades as @grades" do
  #    grade = Grade.create! valid_attributes
  #    expect(Grade.count).to eq(1)
  #    get :index, {}, valid_session
  #    expect(assigns(:grades).all).to eq([grade])
  #  end
  #end

  describe "GET show" do
    it "assigns the requested grade as @grade" do
      get :show, {:id => location_plan.chosen_grade.id, :date => location_plan.schedule.starts_on }, valid_session
      expect(assigns(:grade)).to eq(location_plan.chosen_grade)
    end
  end

  #describe "GET new" do
  #  it "assigns a new grade as @grade" do
  #    get :new, {}, valid_session
  #    expect(assigns(:grade)).to be_a_new(Grade)
  #  end
  #end
  #
  #describe "GET edit" do
  #  it "assigns the requested grade as @grade" do
  #    grade = Grade.create! valid_attributes
  #    get :edit, {:id => grade.to_param}, valid_session
  #    expect(assigns(:grade)).to eq(grade)
  #  end
  #end

  describe "POST create" do

    describe "with valid params" do
      let(:create_params) { {:location_plan_id => location_plan.id, :grade => {:source_grade_id => location_plan.chosen_grade.id}}}

      it "creates a new Grade" do
        location_plan  # Pre-create the original grade

        expect {
          post :create, create_params, valid_session
        }.to change(Grade, :count).by(1)
      end

      it "assigns a newly created grade as @grade" do
        post :create, create_params, valid_session
        expect(assigns(:grade)).to be_a(Grade)
        expect(assigns(:grade)).to be_persisted
      end

      it "redirects to the location plan" do
        post :create, create_params, valid_session
        expect(response).to redirect_to(location_plan)
      end
    end
  end

  #describe "PUT update" do
  #  describe "with valid params" do
  #    it "updates the requested grade" do
  #      grade = Grade.create! valid_attributes
  #      # Assuming there are no other grades in the database, this
  #      # specifies that the Grade created on the previous line
  #      # receives the :update_attributes message with whatever params are
  #      # submitted in the request.
  #      expect_any_instance_of(Grade).to receive(:update).with({ "name" => "MyString" })
  #      put :update, {:id => grade.to_param, :grade => { "name" => "MyString" }}, valid_session
  #    end
  #
  #    it "assigns the requested grade as @grade" do
  #      grade = Grade.create! valid_attributes
  #      put :update, {:id => grade.to_param, :grade => valid_attributes}, valid_session
  #      expect(assigns(:grade)).to eq(grade)
  #    end
  #
  #    it "redirects to the grade" do
  #      grade = Grade.create! valid_attributes
  #      put :update, {:id => grade.to_param, :grade => valid_attributes}, valid_session
  #      expect(response).to redirect_to(grade)
  #    end
  #  end
  #
  #  describe "with invalid params" do
  #    it "assigns the grade as @grade" do
  #      grade = Grade.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      allow_any_instance_of(Grade).to receive(:update).and_return(false)
  #      put :update, {:id => grade.to_param, :grade => { "name" => "invalid value" }}, valid_session
  #      expect(assigns(:grade)).to eq(grade)
  #    end
  #
  #    it "re-renders the 'edit' template" do
  #      grade = Grade.create! valid_attributes
  #      # Trigger the behavior that occurs when invalid params are submitted
  #      allow_any_instance_of(Grade).to receive(:update).and_return(false)
  #      put :update, {:id => grade.to_param, :grade => { "name" => "invalid value" }}, valid_session
  #      expect(response).to render_template("edit")
  #    end
  #  end
  #end

  #describe "DELETE destroy" do
  #  it "destroys the requested grade" do
  #    grade = Grade.create! valid_attributes
  #    expect {
  #      delete :destroy, {:id => grade.to_param}, valid_session
  #    }.to change(Grade, :count).by(-1)
  #  end
  #
  #  it "redirects to the grades list" do
  #    grade = Grade.create! valid_attributes
  #    delete :destroy, {:id => grade.to_param}, valid_session
  #    expect(response).to redirect_to(grades_url)
  #  end
  #end

end
